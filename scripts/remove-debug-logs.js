#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function findFiles(dir, extension) {
  const files = [];
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  
  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);
    
    if (entry.isDirectory() && !entry.name.startsWith('.') && entry.name !== 'node_modules') {
      files.push(...findFiles(fullPath, extension));
    } else if (entry.isFile() && entry.name.endsWith(extension)) {
      files.push(fullPath);
    }
  }
  
  return files;
}

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
const debugPatterns = [
  /console\.log\([^)]*\);?\s*\n?/g,
  /console\.debug\([^)]*\);?\s*\n?/g,
  /console\.warn\([^)]*\);?\s*\n?/g,
  // –û—Å—Ç–∞–≤–ª—è–µ–º console.error –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
];

// –§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
const srcDir = path.join(process.cwd(), 'src');
const files = [
  ...findFiles(srcDir, '.ts'),
  ...findFiles(srcDir, '.tsx')
];

console.log('üßπ Cleaning debug logs from production build...');

let totalRemovals = 0;

files.forEach(filePath => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
  if (filePath.includes('/test') || filePath.includes('.test.')) {
    return;
  }
  
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let originalContent = content;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    debugPatterns.forEach(pattern => {
      content = content.replace(pattern, '');
    });
    
    // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥—Ä—è–¥
    content = content.replace(/\n\s*\n\s*\n/g, '\n\n');
    
    if (content !== originalContent) {
      fs.writeFileSync(filePath, content);
      const removals = (originalContent.match(/console\.(log|debug|warn)/g) || []).length;
      if (removals > 0) {
        console.log(`‚úÖ ${path.relative(process.cwd(), filePath)}: ${removals} debug logs removed`);
        totalRemovals += removals;
      }
    }
  } catch (error) {
    console.error(`‚ùå Error processing ${filePath}:`, error.message);
  }
});

console.log(`\nüéâ Total debug logs removed: ${totalRemovals}`);

// –°–æ–∑–¥–∞–µ–º .env.production —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
const envProduction = `# Production Environment Variables
# Only include variables that are safe for client-side

NEXT_PUBLIC_SUPABASE_URL=\${NEXT_PUBLIC_SUPABASE_URL}
NEXT_PUBLIC_SUPABASE_ANON_KEY=\${NEXT_PUBLIC_SUPABASE_ANON_KEY}

# Remove unused variables
# NEXTAUTH_SECRET - not used in current implementation
# NEXTAUTH_URL - not used in current implementation
`;

fs.writeFileSync('.env.production', envProduction);
console.log('üìù Created .env.production template');

console.log('\nüöÄ Production cleanup complete!');
console.log('\n‚ö†Ô∏è  Manual actions required:');
console.log('1. Remove test pages: /test and /test-supabase');
console.log('2. Set up proper environment variables in production');
console.log('3. Review and remove any remaining sensitive console.error calls');