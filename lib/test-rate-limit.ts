/**
 * –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limiting
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–∏–º–∏—Ç–æ–≤
 */

import { createCard } from '@/lib/api/cards'
import { createBoard } from '@/lib/api/boards'
import { getUserRateLimits, formatTimeUntilReset } from '@/lib/rate-limit'

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
 */
export async function testCardRateLimit(sessionId: string, createdBy: string, fingerprint: string) {
  console.log('üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫...')
  
  const cardCreationPromises = []
  
  // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å 12 –∫–∞—Ä—Ç–æ—á–µ–∫ (–±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ –≤ 10)
  for (let i = 1; i <= 12; i++) {
    cardCreationPromises.push(
      createCard({
        sessionId,
        content: `–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ #${i}`,
        createdBy,
        userFingerprint: fingerprint,
        positionX: i * 50,
        positionY: i * 30
      }).then(() => {
        console.log(`‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ #${i} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
        return { success: true, index: i }
      }).catch((error) => {
        console.log(`‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ #${i} –Ω–µ —Å–æ–∑–¥–∞–Ω–∞: ${error.message}`)
        return { success: false, index: i, error: error.message }
      })
    )
  }
  
  const results = await Promise.all(cardCreationPromises)
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const successful = results.filter(r => r.success).length
  const failed = results.filter(r => !r.success).length
  
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –∫–∞—Ä—Ç–æ—á–µ–∫:`)
  console.log(`   –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: ${successful}`)
  console.log(`   –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏–º–∏—Ç–æ–º: ${failed}`)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
  const limits = await getUserRateLimits(fingerprint)
  const cardLimit = limits.find(l => l.action_type === 'create_card')
  
  if (cardLimit) {
    console.log(`üìà –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –∫–∞—Ä—Ç–æ—á–µ–∫: ${cardLimit.current_count}/${cardLimit.limit_value}`)
    console.log(`‚è∞ –°–±—Ä–æ—Å —á–µ—Ä–µ–∑: ${formatTimeUntilReset(cardLimit.time_until_reset)}`)
  }
  
  return results
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–æ–∫ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
 */
export async function testBoardRateLimit(createdBy: string, count: number = 5) {
  console.log(`üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –¥–æ—Å–æ–∫ (—Å–æ–∑–¥–∞–µ–º ${count} –¥–æ—Å–æ–∫)...`)
  
  const boardCreationPromises = []
  
  for (let i = 1; i <= count; i++) {
    boardCreationPromises.push(
      createBoard({
        title: `–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞ #${i}`,
        description: `–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –¥–æ—Å–∫–∏ –Ω–æ–º–µ—Ä ${i}`,
        createdBy
      }).then(() => {
        console.log(`‚úÖ –î–æ—Å–∫–∞ #${i} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
        return { success: true, index: i }
      }).catch((error) => {
        console.log(`‚ùå –î–æ—Å–∫–∞ #${i} –Ω–µ —Å–æ–∑–¥–∞–Ω–∞: ${error.message}`)
        return { success: false, index: i, error: error.message }
      })
    )
  }
  
  const results = await Promise.all(boardCreationPromises)
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const successful = results.filter(r => r.success).length
  const failed = results.filter(r => !r.success).length
  
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –¥–æ—Å–æ–∫:`)
  console.log(`   –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: ${successful}`)
  console.log(`   –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏–º–∏—Ç–æ–º: ${failed}`)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
  const limits = await getUserRateLimits(createdBy)
  const boardLimit = limits.find(l => l.action_type === 'create_board')
  
  if (boardLimit) {
    console.log(`üìà –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –¥–æ—Å–æ–∫: ${boardLimit.current_count}/${boardLimit.limit_value}`)
    console.log(`‚è∞ –°–±—Ä–æ—Å —á–µ—Ä–µ–∑: ${formatTimeUntilReset(boardLimit.time_until_reset)}`)
  }
  
  return results
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function displayCurrentLimits(fingerprint: string) {
  console.log(`üìä –¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –¥–ª—è fingerprint: ${fingerprint}`)
  
  try {
    const limits = await getUserRateLimits(fingerprint)
    
    if (limits.length === 0) {
      console.log('   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤')
      return
    }
    
    limits.forEach(limit => {
      const usagePercent = Math.round((limit.current_count / limit.limit_value) * 100)
      const resetTime = formatTimeUntilReset(limit.time_until_reset)
      
      console.log(`   ${limit.action_type}:`)
      console.log(`     –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${limit.current_count}/${limit.limit_value} (${usagePercent}%)`)
      console.log(`     –°–±—Ä–æ—Å —á–µ—Ä–µ–∑: ${resetTime}`)
      
      if (usagePercent >= 80) {
        console.log(`     ‚ö†Ô∏è  –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É!`)
      }
      if (usagePercent >= 100) {
        console.log(`     üö´ –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!`)
      }
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤:', error)
  }
}

/**
 * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã rate limiting
 */
export async function runFullRateLimitTest() {
  const testFingerprint = `test_${Date.now()}`
  const testSessionId = '550e8400-e29b-41d4-a716-446655440000'
  const testUserId = '550e8400-e29b-41d4-a716-446655440001'
  
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã rate limiting...')
  console.log(`   Fingerprint: ${testFingerprint}`)
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  await displayCurrentLimits(testFingerprint)
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
  console.log('\n--- –¢–µ—Å—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ ---')
  await testCardRateLimit(testSessionId, testUserId, testFingerprint)
  
  // –ñ–¥–µ–º 6 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
  console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 6 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞ –∫–∞—Ä—Ç–æ—á–µ–∫...')
  await new Promise(resolve => setTimeout(resolve, 6000))
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
  console.log('\n--- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ ---')
  await displayCurrentLimits(testFingerprint)
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å–∫–∏
  console.log('\n--- –¢–µ—Å—Ç –¥–æ—Å–æ–∫ ---')
  await testBoardRateLimit(testFingerprint, 3)
  
  // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  console.log('\n--- –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---')
  await displayCurrentLimits(testFingerprint)
  
  console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!')
}