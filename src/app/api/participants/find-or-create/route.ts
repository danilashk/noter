import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { getNextAvailableColor, isParticipantLimitReached } from '@/lib/colors';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

const supabase = createClient(supabaseUrl, supabaseAnonKey);

export async function POST(request: NextRequest) {
  try {
    const { sessionId, userFingerprint, displayName } = await request.json();

    if (!sessionId || !userFingerprint || !displayName) {
      return NextResponse.json(
        { error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' },
        { status: 400 }
      );
    }

    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ fingerprint
    const { data: existingParticipant } = await supabase
      .from('participants')
      .select('*')
      .eq('session_id', sessionId)
      .eq('user_fingerprint', userFingerprint)
      .single();

    if (existingParticipant) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      await supabase
        .from('participants')
        .update({ last_seen: new Date().toISOString() })
        .eq('id', existingParticipant.id);

      return NextResponse.json({
        id: existingParticipant.id,
        name: existingParticipant.display_name,
        color: existingParticipant.color,
        isNew: false
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
    const { data: allParticipants } = await supabase
      .from('participants')
      .select('color')
      .eq('session_id', sessionId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (isParticipantLimitReached(allParticipants?.length || 0)) {
      return NextResponse.json(
        { error: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (6 —á–µ–ª–æ–≤–µ–∫)' },
        { status: 400 }
      );
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ü–≤–µ—Ç
    const usedColors = allParticipants?.map(p => p.color) || [];
    const assignedColor = getNextAvailableColor(usedColors);

    if (!assignedColor) {
      return NextResponse.json(
        { error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞' },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const { data: newParticipant, error } = await supabase
      .from('participants')
      .insert({
        session_id: sessionId,
        user_fingerprint: userFingerprint,
        display_name: displayName,
        name: displayName, // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º displayName –∏ –¥–ª—è name
        color: assignedColor
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      id: newParticipant.id,
      name: newParticipant.display_name,
      color: newParticipant.color,
      isNew: true
    });

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ find-or-create:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
