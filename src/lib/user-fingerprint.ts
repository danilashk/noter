/**
 * –°–∏—Å—Ç–µ–º–∞ –Ω–∞–¥–µ–∂–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç fingerprinting + cookies –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
 */

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –±—Ä–∞—É–∑–µ—Ä–∞
export async function generateBrowserFingerprint(): Promise<string> {
  try {
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–∞—É–∑–µ—Ä–µ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    const fingerprintData = [
      navigator.userAgent,
      navigator.language,
      navigator.languages?.join(',') || '',
      screen.width + 'x' + screen.height,
      screen.colorDepth.toString(),
      new Date().getTimezoneOffset().toString(),
      Intl.DateTimeFormat().resolvedOptions().timeZone || '',
      navigator.hardwareConcurrency?.toString() || '0',
      navigator.platform,
      navigator.cookieEnabled.toString(),
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
      Date.now().toString()
    ].join('|');

    // –•–µ—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const encoder = new TextEncoder();
    const data = encoder.encode(fingerprintData);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ hex —Å—Ç—Ä–æ–∫—É
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    
    return hashHex.substring(0, 32); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 32 —Å–∏–º–≤–æ–ª–∞
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ fingerprint, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error);
    // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Å–ª—É—á–∞–π–Ω–æ–º—É ID
    return 'fallback_' + Math.random().toString(36).substring(2, 15);
  }
}

// –†–∞–±–æ—Ç–∞ —Å cookies
export function setCookie(name: string, value: string, days: number = 365) {
  const expires = new Date();
  expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
  document.cookie = `${name}=${value}; expires=${expires.toUTCString()}; path=/; SameSite=Strict`;
}

export function getCookie(name: string): string | null {
  const nameEQ = name + "=";
  const ca = document.cookie.split(';');
  for (let i = 0; i < ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) === ' ') c = c.substring(1, c.length);
    if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
  }
  return null;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ User ID
export async function getStableUserId(): Promise<string> {
  // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º cookie
  let userId = getCookie('brainstorm_user_id');
  
  if (userId && userId.length > 10) {
    console.log('üç™ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω User ID –∏–∑ cookie:', userId.substring(0, 8) + '...');
    return userId;
  }

  // 2. –ï—Å–ª–∏ –Ω–µ—Ç cookie, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ fingerprint
  const fingerprint = await generateBrowserFingerprint();
  
  // 3. –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π User ID (fingerprint + timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏)
  userId = `fp_${fingerprint}_${Date.now().toString(36)}`;
  
  // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cookie –Ω–∞ –≥–æ–¥
  setCookie('brainstorm_user_id', userId, 365);
  
  console.log('üÜî –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π User ID:', userId.substring(0, 8) + '...');
  return userId;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —á–∏—Ç–∞–µ–º–æ–≥–æ ID –¥–ª—è UI
export function getShortUserId(fullUserId: string): string {
  return fullUserId.substring(3, 11); // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å fp_ –∏ –±–µ—Ä–µ–º 8 —Å–∏–º–≤–æ–ª–æ–≤
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è "–∞–≤–∞—Ç–∞—Ä–∞" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ ID
export function getUserColor(userId: string): string {
  const colors = [
    '#06b6d4', '#3b82f6', '#8b5cf6', '#ec4899',
    '#ef4444', '#f97316', '#eab308', '#22c55e',
    '#14b8a6', '#f59e0b', '#84cc16', '#6366f1'
  ];
  
  // –ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
  let hash = 0;
  for (let i = 0; i < userId.length; i++) {
    hash = ((hash << 5) - hash + userId.charCodeAt(i)) & 0xffffffff;
  }
  
  return colors[Math.abs(hash) % colors.length];
}