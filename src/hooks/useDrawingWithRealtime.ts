import { useState, useEffect, useCallback } from 'react';
import { drawingApi } from '@/lib/api/drawing';
import type { DrawingLine, CreateDrawingLineData } from '@/lib/types/board';

export function useDrawingWithRealtime(sessionId: string, currentParticipantId: string | null) {
  const [lines, setLines] = useState<DrawingLine[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
  useEffect(() => {
    if (!sessionId) {
      console.log('üé® –ù–µ—Ç sessionId –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–Ω–∏–π');
      return;
    }

    console.log('üé® –ó–∞–≥—Ä—É–∂–∞—é –Ω–∞—á–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId);

    const loadLines = async () => {
      try {
        setLoading(true);
        setError(null);
        const initialLines = await drawingApi.getDrawingLines(sessionId);
        console.log('üé® –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ª–∏–Ω–∏–π –∏–∑ –ë–î:', initialLines.length);
        setLines(initialLines);
      } catch (err) {
        setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–Ω–∏–π');
        console.error('üé® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–Ω–∏–π —Ä–∏—Å–æ–≤–∞–Ω–∏—è:', err);
      } finally {
        setLoading(false);
      }
    };

    loadLines();
  }, [sessionId]);

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ realtime –∏–∑–º–µ–Ω–µ–Ω–∏—è
  useEffect(() => {
    if (!sessionId) {
      console.log('üé® –ù–µ—Ç sessionId –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ realtime');
      return;
    }

    console.log('üé® –ü–æ–¥–ø–∏—Å—ã–≤–∞—é—Å—å –Ω–∞ realtime –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId);

    const unsubscribe = drawingApi.subscribeToDrawingLines(sessionId, (updatedLines) => {
      console.log('üé® –ü–æ–ª—É—á–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏ —á–µ—Ä–µ–∑ realtime:', updatedLines.length);
      setLines(updatedLines);
    });

    return unsubscribe;
  }, [sessionId]);

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–∏–Ω–∏–∏
  const createLine = useCallback(async (lineData: CreateDrawingLineData) => {
    if (!sessionId || !currentParticipantId) {
      console.log('üé® –ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ª–∏–Ω–∏—é: sessionId =', sessionId, 'participantId =', currentParticipantId);
      return;
    }

    console.log('üé® –°–æ–∑–¥–∞—é –ª–∏–Ω–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏:', {
      points: lineData.points.length,
      color: lineData.color,
      createdBy: currentParticipantId
    });

    try {
      const result = await drawingApi.createDrawingLine(sessionId, {
        ...lineData,
        createdBy: currentParticipantId,
      });
      console.log('üé® –õ–∏–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î:', result.id);
      // –õ–∏–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ realtime –ø–æ–¥–ø–∏—Å–∫—É
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–Ω–∏–∏');
      console.error('üé® –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–Ω–∏–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è:', err);
    }
  }, [sessionId, currentParticipantId]);

  // –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏
  const deleteLine = useCallback(async (lineId: string) => {
    try {
      await drawingApi.deleteDrawingLine(lineId);
      // –õ–∏–Ω–∏—è –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ realtime –ø–æ–¥–ø–∏—Å–∫—É
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–Ω–∏–∏');
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–Ω–∏–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è:', err);
    }
  }, []);

  return {
    lines,
    loading,
    error,
    createLine,
    deleteLine,
  };
}
